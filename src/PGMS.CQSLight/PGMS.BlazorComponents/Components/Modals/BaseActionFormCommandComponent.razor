@typeparam TActionItem
@typeparam TCommand

@using PGMS.BlazorComponents.Models
@inherits ComponentBase;

@inject IStringLocalizer localizer;

@if (isAllowed)
{
    @if (DisplayType == ActionDisplayType.Button)
    {
        <Button Class="zaddons_btn_client" Color="Color.Secondary" @onclick="async () => await DisplayModal()" Block Disabled="@Disabled">
            @if (ActionIcon != null)
            {
                <DynamicComponent Type="@ActionIcon.GetIconDynamicComponentType()" Parameters="@ActionIcon.GetParameters(DisplayType)"></DynamicComponent>
            }
            @Text
        </Button>
    }
    @if (DisplayType == ActionDisplayType.QuickAction)
    {
        @if (ActionIcon != null)
        {
            <Tooltip Text="@Text" Inline>
                <span @onclick="async () => await DisplayModal()">
                    <DynamicComponent Type="@ActionIcon.GetIconDynamicComponentType()" Parameters="@ActionIcon.GetParameters(DisplayType)"></DynamicComponent>
                </span>
            </Tooltip>
        }
        else
        {
            <span @onclick="async () => await DisplayModal()">
                @Text
            </span>
        }
    }
       
    @if (DisplayType == ActionDisplayType.ActionLink)
    {
        <a href="#" @onclick="async () => await DisplayModal()" @onclick:preventDefault style="cursor: pointer">@Text</a>
    }

    @if (ActionFormType == ActionFormType.SidePanel)
    {
        <ActionSidePanelComponent TActionItem="TActionItem" @ref="@actionItem"
                                  ActionParameters="@actionParameters"
                                  ModalTitle="@(string.IsNullOrEmpty(ModalTitle) ? Text : ModalTitle)"
                                  ActionButtonLabel="@(string.IsNullOrEmpty(ActionButtonLabel) ? localizer["Continue"] : ActionButtonLabel)"
                                  OnActionCompleted="async () => await OnActionCompleted.InvokeAsync()">
        </ActionSidePanelComponent>
    }
    @if (ActionFormType == ActionFormType.Modal)
    {
        <ActionModalComponent TActionItem="TActionItem" @ref="@actionItem"
                          ActionParameters="@actionParameters"
                          ModalTitle="@(string.IsNullOrEmpty(ModalTitle) ? Text : ModalTitle)"
                          ActionButtonLabel="@(string.IsNullOrEmpty(ActionButtonLabel) ? localizer["Continue"] : ActionButtonLabel)"
                          ModalSize="@ModalSize"
                          OnActionCompleted="async () => await OnActionCompleted.InvokeAsync()">
        </ActionModalComponent>
    }
@*    @if (ActionFormType == ActionFormType.ModalMultiStep)
    {
        <ActionModalMultiStepComponent TActionItem="TActionItem" @ref="@actionItem"
                              ActionParameters="@actionParameters"
                              ModalTitle="@(string.IsNullOrEmpty(ModalTitle) ? Text : ModalTitle)"
                              ActionButtonLabel="@(string.IsNullOrEmpty(ActionButtonLabel) ? localizer["Continue"] : ActionButtonLabel)"
                              ModalSize="@ModalSize"
                              OnActionCompleted="async () => await OnActionCompleted.InvokeAsync()">
        </ActionModalMultiStepComponent>
    }*@
}
else
{
    <SetWarning Info="@notAllowedMessage">

    </SetWarning>
}